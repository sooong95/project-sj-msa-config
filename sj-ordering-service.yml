#server:
#  port: 8083

spring :
  kafka:
    bootstrap-servers: kafka:9092
    consumer:
      # group-id 는 컨슈머 그룹을 식별하는 id 로서, 동일한 그룹 id 를 가진 컨슈머들은 메시지를 분담해서 consume
      # 만약 여러 컨슈머가 다른 group-id 를 가지고 한 topic 을 리슨하면 각기 메시지를 수신하여 메시지 전파 효과 발생
      group-id: ordering-group
      # 카프카내에 들어와 있는 메시지 중에 처음 들어와 있는 메시지부터 읽기 시작(latest: 현시점 이후로 들어오는 메시지만 read)
      auto-offset-reset: earliest
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://sj-rds-2.cbe4mg0g0beg.ap-northeast-2.rds.amazonaws.com:3306/sj_ordering_db?useSSL=false&allowPublicKeyRetrieval=true
    username: admin
    password: 'password'

resilience4j:
  circuitbreaker:
    instances:
      itemService:
        failureRateThreshold: 40  # 40% 이상의 실패율이면 OPEN 상태로 변경
        slowCallRateThreshold: 40  # 40% 이상의 요청이 느리면 OPEN 상태로 변경
        slowCallDurationThreshold: 2s  # 2초 이상 걸리면 느린호출로 간주
        waitDurationInOpenState: 10s  # OPEN 상태에서 10초 동안 차단 후 HALF-OPEN 상태로 변경
        permittedNumberOfCallsInHalfOpenState: 2  # HALF-OPEN 상태에서 2개 요청이 모두 성공하면 → CLOSED 상태로 변경
        slidingWindowSize: 5  # 최근 5개의 요청을 기준으로 실패율 계산
        slidingWindowType: COUNT_BASED  # 요청 개수를 기준으로 실패율을 계산하도록 설정
        minimumNumberOfCalls: 4  # 최소 정상적인 요청을 4번 실행된 이후 Circuit Breaker 활성화
        ignoreExceptions:
          - java.lang.IllegalArgumentException  # IllegalArgumentException 무시
      shopService:
        failureRateThreshold: 40  # 40% 이상의 실패율이면 OPEN 상태로 변경
        slowCallRateThreshold: 40  # 40% 이상의 요청이 느리면 OPEN 상태로 변경
        slowCallDurationThreshold: 2s  # 2초 이상 걸리면 느린호출로 간주
        waitDurationInOpenState: 10s  # OPEN 상태에서 10초 동안 차단 후 HALF-OPEN 상태로 변경
        permittedNumberOfCallsInHalfOpenState: 2  # HALF-OPEN 상태에서 2개 요청이 모두 성공하면 → CLOSED 상태로 변경
        slidingWindowSize: 5  # 최근 5개의 요청을 기준으로 실패율 계산
        slidingWindowType: COUNT_BASED  # 요청 개수를 기준으로 실패율을 계산하도록 설정
        minimumNumberOfCalls: 4  # 최소 정상적인 요청을 4번 실행된 이후 Circuit Breaker 활성화
        ignoreExceptions:
          - java.lang.IllegalArgumentException  # IllegalArgumentException 무시